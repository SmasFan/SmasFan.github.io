{"meta":{"title":"SmasFan","subtitle":"Blog","description":"","author":"SmasFan","url":"https://smasfan.github.io","root":"/"},"pages":[{"title":"categories","date":"2020-11-17T15:21:41.000Z","updated":"2020-11-18T08:11:01.158Z","comments":true,"path":"categories/index.html","permalink":"https://smasfan.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-11-17T15:21:41.000Z","updated":"2020-11-18T01:15:17.348Z","comments":true,"path":"tags/index.html","permalink":"https://smasfan.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"前端实用小技巧","slug":"前端实用小技巧","date":"2020-11-25T03:18:20.000Z","updated":"2020-11-25T03:24:10.187Z","comments":true,"path":"2020/11/25/前端实用小技巧/","link":"","permalink":"https://smasfan.github.io/2020/11/25/%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/","excerpt":"这里记录一些平时会用到的前端小代码","text":"这里记录一些平时会用到的前端小代码 查找json中的某个字段对应的值 1var quest &#x3D; jsonList.find((item)&#x3D;&gt; item.a &#x3D;&#x3D;&#x3D; b); 顺序排列的普通数组根据上下级Id转树状 1234567891011121314151617181920 translateDataToTree(data) &#123; let parents &#x3D; data.filter(value &#x3D;&gt; value.ParentId &#x3D;&#x3D; 0 ) let children &#x3D; data.filter(value &#x3D;&gt; value.ParentId !&#x3D;&#x3D; 0) let translator &#x3D; (parents, children) &#x3D;&gt; &#123; parents.forEach((parent) &#x3D;&gt; &#123; children.forEach((current, index) &#x3D;&gt; &#123; if (current.ParentId &#x3D;&#x3D;&#x3D; parent.MenuId) &#123; let temp &#x3D; JSON.parse(JSON.stringify(children)) temp.splice(index, 1) translator([current], temp) typeof parent.children !&#x3D;&#x3D; &#39;undefined&#39; ? parent.children.push(current) : parent.children &#x3D; [current] &#125; &#125;) &#125;) &#125; translator(parents, children) console.log(parents); return parents&#125;,","categories":[{"name":"web前端","slug":"web前端","permalink":"https://smasfan.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[]},{"title":"Vue发布后IIS反向代理","slug":"Vue发布后IIS反向代理","date":"2020-11-18T05:56:24.000Z","updated":"2020-11-18T05:56:39.697Z","comments":true,"path":"2020/11/18/Vue发布后IIS反向代理/","link":"","permalink":"https://smasfan.github.io/2020/11/18/Vue%E5%8F%91%E5%B8%83%E5%90%8EIIS%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","excerpt":"上面我们刚刚处理过了Vue跨域，但是网站发布后我们会发现接口报404错误，这是因为发布后仍需要我们重新配置反向代理。这里我们来看一下怎么在IIS配置对应的反向代理。","text":"上面我们刚刚处理过了Vue跨域，但是网站发布后我们会发现接口报404错误，这是因为发布后仍需要我们重新配置反向代理。这里我们来看一下怎么在IIS配置对应的反向代理。 先下载对应的IIS插件 requestRouter_amd64 rewrite_amd64_zh-CN 配置反向代理 安装完插件后我们打开IIS打开刚才安装的第一个插件 继续按照图指示 勾选下图的框后点击右边的应用。 接下来在iis里选择发布的网站，会在主页看到我们安装的第二个插件，url重写。打开并且选择建立新规则-&gt;空白规则 首先配置规则，因为我们之前设置的是/api，所以这里写api 接着下图添加条件（我因为添加过了，所以显示是编辑），地址输入我们网站地址 最后配置接口地址，如下图{R:2}是后面跟的路径参数，如上面我们配置的下来接口地址显示为/api/user/login的话，实际上过来是/user/login,所以这里注意下路径 全部配置好后再打开网站，这时候应该就能看到接口跑通了","categories":[{"name":"web前端","slug":"web前端","permalink":"https://smasfan.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[]},{"title":"Vue跨域","slug":"Vue跨域","date":"2020-11-18T05:54:53.000Z","updated":"2020-11-18T05:55:22.818Z","comments":true,"path":"2020/11/18/Vue跨域/","link":"","permalink":"https://smasfan.github.io/2020/11/18/Vue%E8%B7%A8%E5%9F%9F/","excerpt":"这两天在公司搭建了一个vue的项目，由于之前都是有前端负责，现在自己动手遇到了不少坑。其中跨域问题是折腾了不少头发，这个问题不解决session都没法用，最后才发现其实很好解决。","text":"这两天在公司搭建了一个vue的项目，由于之前都是有前端负责，现在自己动手遇到了不少坑。其中跨域问题是折腾了不少头发，这个问题不解决session都没法用，最后才发现其实很好解决。 首先在vue.config.js这个文件下设置对应的代理，这里target为接口地址。 12345678910&#x2F;&#x2F;跨域devServer: &#123; proxy: &#123; &#39;&#x2F;api&#39;:&#123; target:&#39;http:&#x2F;&#x2F;localhost:44344&#x2F;&#39;, changeOrigin:true, pathRewrite:&#123;&#39;^&#x2F;api&#39;:&#39;&#39; &#125; &#125; &#125;&#125; 然后在request.js里设置同样的路径，如上面我们设置的[/api]则在baseURL里设置 12345const service &#x3D; axios.create(&#123; baseURL: &#39;&#x2F;api&#39;, timeout: 5000, withCredentials: true&#125;); 然后重启项目，接口可以调试通了","categories":[{"name":"web前端","slug":"web前端","permalink":"https://smasfan.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[]}],"categories":[{"name":"web前端","slug":"web前端","permalink":"https://smasfan.github.io/categories/web%E5%89%8D%E7%AB%AF/"}],"tags":[]}